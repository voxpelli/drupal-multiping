<?php
// $Id: multiping.module,v 1.4.2.3 2010/02/21 11:24:52 voxpelli Exp $

/**
 * @file
 * Main file for the Multiping module, which is a ping module for pinging multiple sites.
 */

define('MULTIPING_WHEN_ACTIVE', 1);
define('MULTIPING_WHEN_TAXONOMY', 2);
define('MULTIPING_WHEN_NODETYPE', 4);
define('MULTIPING_WHEN_FRONTPAGE', 8);

function _multiping_get_settings($defaults = FALSE) {
  static $settings = NULL;
  static $default_settings = array(
  'global' => array(
    'time_between_pings' => '10',
    'pingatonce' => FALSE,
    ),
  );
  // Defaults requested?
  if ($defaults) {
    return $default_settings;
  }
  // merge settings from variable table with defaults
  if ($settings == NULL) {
    $settings = variable_get('multiping', array());
    foreach ($default_settings as $key => $value) {
      if (is_array($value)) {
        $settings[$key] = isset($settings[$key]) ? array_merge($value, $settings[$key]) : $value;
      }
      elseif (!isset($settings[$key])) {
        $settings[$key] = $value;
      }
    }
  }
  // Return result
  return $settings;
}


/**
 * Implementation of hook_menu().
 */
function multiping_menu() {
  $items = array();
  $items['admin/settings/multiping'] = array(
    'title' => 'Ping services',
    'description' => 'Configure when to ping which sites',
    'page callback' => 'multiping_admin',
    'page arguments' => array(),
    'access callback' => 'user_access',
    'access arguments' => array('admin pings'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/settings/multiping/pingall'] = array(
    'title' => 'Ping all',
    'page callback' => 'multiping_pingall',
    'access arguments' => array('admin pings'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/settings/multiping/new'] = array(
    'title' => 'New ping service',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('multiping_edit_service', '0'),
    'access arguments' => array('admin pings'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/settings/multiping/%/edit'] = array(
    'title' => 'Edit ping service',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('multiping_edit_service', 3),
    'access arguments' => array('admin pings'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/settings/multiping/%/ping'] = array(
    'title' => 'Ping service',
    'page arguments' => array(3),
    'page callback' => 'multiping_ping',
    'access arguments' => array('admin pings'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/settings/multiping/%/delete'] = array(
    'title' => 'Delete ping service',
    'page arguments' => array(3),
    'page callback' => 'multiping_delete',
    'access arguments' => array('admin pings'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implementation of hook_perm().
 */
function multiping_perm() {
  return array('admin pings');
}

function _multiping_doping($pingservice) {
  global $base_url;

  // Assemble site name
  $name = variable_get('site_name', '');
  $slogan = variable_get('site_slogan', '');
  if (drupal_strlen($slogan) > 0) {
    $name = $name .' - '. $slogan;
  }
  // Determine rss url
  if (module_exists('taxonomy') && ($pingservice->whentoping & MULTIPING_WHEN_TAXONOMY) && count($pingservice->voc) > 0 && $pingservice->submitmainrss == 0) {
    // Taxonomy module exists, "ping only for nodes with taxonomy",
    // Some taxonomy elements are actually selected, "main rss" override is off
    $voc = unserialize($pingservice->voc);
    $rss_url = $base_url .'/taxonomy/term/'. implode('+', $voc) .'/0/feed';
  }
  else {
    $rss_url = $base_url .'/rss.xml';
  }
  // Ping! Check service method
  if ($pingservice->method && drupal_strlen($pingservice->method) > 0) {
    //watchdog('Multiping',"XML ping: ".$pingservice->url);
    $result = xmlrpc($pingservice->url, $pingservice->method, $name, $base_url, $rss_url);
  }
  else {
    $pingurl = strtr($pingservice->url, array(
      '%name' => urlencode($name),
      '%url' => urlencode($base_url .'/'),
      '%rss' => urlencode($rss_url),
    ));
    $result = drupal_http_request($pingurl);
    //watchdog('Multiping',"Non-XML ping: ".$pingurl." Result: ".$result->code." Data: '".$result->data."'");
    if ($result->code == 200) {
      $result = (strpos($result->data, '1') == 0);
    }
    else {
      $result = FALSE;
    }
  }
  // On success: Update timestamp
  if ($result) {
    db_query("UPDATE {multiping} SET lastping=%d WHERE id=%d", time(), $pingservice->id);
  }
  return $result;
}


function _multiping_checkpings() {
  $settings = _multiping_get_settings();
  $result = db_query('SELECT * FROM {multiping}');
  while ($row = db_fetch_object($result)) {
    // Ping service active?
    if (!($row->whentoping & MULTIPING_WHEN_ACTIVE)) {
      continue;
    }
    // Default query: Published nodes only
    $sql_from = '{node} n';
    $sql_where = 'n.status > 0';
    // Taxonomy selection
    if (module_exists('taxonomy') && ($row->whentoping & MULTIPING_WHEN_TAXONOMY)) {
      // Find most recent date for nodes with given taxonomy
      $voc = unserialize($row->voc);
      $sql_from .= ', {term_node} t';
      $sql_where .= ' AND t.nid = n.nid AND (t.tid = '. implode(' OR t.tid=', $voc) .')';
    }
    // Nodetype selection
    if ($row->whentoping & MULTIPING_WHEN_NODETYPE) {
      $nodetype = unserialize($row->nodetypes);
      $sql_where .= " AND (n.type = '". implode("' OR n.type = '", $nodetype) ."')";
    }
    // Promoted to front page?
    if ($row->whentoping & MULTIPING_WHEN_FRONTPAGE) {
      $sql_where .= ' AND n.promote > 0';
    }
    //watchdog("debug","Multiping ".$row->name.": SELECT * FROM ".$sql_from." WHERE ".$sql_where);
    // Get max creation and modification time
    $res_time = db_query('SELECT MAX(created) FROM '. $sql_from .' WHERE '. $sql_where);
    $row_time = db_fetch_array($res_time);
    $max_created = $row_time ? $row_time['MAX(created)'] : 0;

    $res_time = db_query('SELECT MAX(changed) FROM '. $sql_from .' WHERE '. $sql_where);
    $row_time = db_fetch_array($res_time);
    $max_changed = $row_time ? $row_time['MAX(changed)'] : 0;

    $lastmodified = max($max_created, $max_changed);

    //watchdog('Multiping',"lastmodified=".$lastmodified);
    // Check wether to ping service
    if ($lastmodified > $row->lastping) {
      // With every failure, exponentially increase retry time
      $retry_time = $settings['global']['time_between_pings'] * pow(1.5, $row->failcount);

      // Retry at least once a day
      if ($retry_time > 24 * 60) {
        $retry_time = 24 * 60;
      }

      if ($row->lastping + 60 * $retry_time > time()) {
        // Timeout not yet reached
        watchdog('Multiping', "Timeout for service @name not yet reached", array('@name' => $row->name));
      }
      elseif (_multiping_doping($row)) {
        watchdog('Multiping', 'Successfully notified %site.', array('%site' => $row->name));
        db_query("UPDATE {multiping} SET failcount = 0 WHERE id = %d", $row->id);
      }
      else {
        watchdog('Multiping', 'Failed to notify %site.', array('%site' => $row->name), WATCHDOG_WARNING);
        db_query("UPDATE {multiping} SET failcount = %d WHERE id = %d", $row->failcount + 1, $row->id);
      }
    }
  }
}


/**
 * Implementation of hook_cron().
 * Check if sites need to be pinged.
 */
function multiping_cron() {
  watchdog('Multiping', 'Cron run', array(), WATCHDOG_DEBUG);
  _multiping_checkpings();
}


/**
 * Implementation of hook_nodeapi().
 * If pingatonce is set, check pings.
 */
function multiping_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  //drupal_set_message("op=".$op);
  switch ($op) {
    case 'insert':
    case 'update':
      $settings = _multiping_get_settings();
      if ($settings['global']['pingatonce']) {
        _multiping_checkpings();
      }
      break;
  }
}


function multiping_edit_service($form_state, $id) {
  $edit = array();
  $edit['id'] = $id;
  $edit['name'] = '';
  $edit['url'] = 'http://';
  $edit['method'] = 'weblogUpdates.ping';
  $edit['when_active'] = 1;
  $edit['when_taxonomy'] = 0;
  $edit['when_nodetype'] = 0;
  $edit['when_frontpage'] = 0;
  $edit['submitmainrss'] = 1;
  $edit['voc'] = '';
  $edit['nodetype'] = '';

  if ($id > 0) {
    $result = db_query('SELECT * FROM {multiping} WHERE id = %d', $id);
    $row = db_fetch_object($result);
    if ($row) {
      $edit['name'] = $row->name;
      $edit['url'] = $row->url;
      $edit['method'] = $row->method;
      $edit['when_active'] = (($row->whentoping & MULTIPING_WHEN_ACTIVE) > 0);
      $edit['when_taxonomy'] = (($row->whentoping & MULTIPING_WHEN_TAXONOMY) > 0);
      $edit['when_nodetype'] = (($row->whentoping & MULTIPING_WHEN_NODETYPE) > 0);
      $edit['when_frontpage'] = (($row->whentoping & MULTIPING_WHEN_FRONTPAGE) > 0);
      $edit['submitmainrss'] = $row->submitmainrss;
      $edit['voc'] = unserialize($row->voc);
      $edit['nodetype'] = unserialize($row->nodetypes);
    }
    else {
      watchdog('Multiping', 'Query for id=@id returned 0 rows', array('@id' => $id), WATCHDOG_WARNING);
      $id = 0;
    }
  }

  $form = array();
  $form['id'] = array(
    '#type' => 'hidden',
    '#value' => $id,
  );
  $form['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Site name'),
    '#default_value' => $edit['name'],
    '#size' => 50,
    '#maxlength' => 100,
    '#description' => t('Displayed name of the site to be pinged'),
    '#attributes' => NULL,
    '#required' => TRUE,
  );
  $form['url'] = array(
    '#type' => 'textfield',
    '#title' => t('URL'),
    '#default_value' => $edit['url'],
    '#size' => 50,
    '#maxlength' => 255,
    '#description' => t('URL of the ping service. '.
      'The following replacements will be done:<br />'.
      '%name - Site name (and slogan)<br />'.
      '%url - Site base URL<br />'.
      '%rss - URL of RSS feed'),
    '#attributes' => NULL,
    '#required' => TRUE,
  );
  /* Todo: Submit which RSS feed? Whole feed or a feed containing only
     items of the selected taxonomies? */
  $form['method'] = array(
    '#type' => 'textfield',
    '#title' => t('Method name'),
    '#default_value' => $edit['method'],
    '#size' => 50,
    '#maxlength' => 50,
    '#description' => t('If this is an XML service: Name of the method to be called'),
    '#attributes' => NULL,
    '#required' => FALSE,
  );
  $options = array(
    '1' => t('Always ping'),
    '0' => t('Don\'t ping'),
  );
  if (module_exists('taxonomy')) {
    $options['2'] = t('Ping only for nodes with the following taxonomy');
  }
  $form['when_active'] = array(
    '#type' => 'checkbox',
    '#title' => t('Service active'),
    '#default_value' => $edit['when_active'],
    '#description' => t('Activate or deactivate this service'),
  );
  if (module_exists('taxonomy')) {
    $form['when_taxonomy'] = array(
      '#type' => 'checkbox',
      '#title' => t('Ping only for selected taxonomies'),
      '#default_value' => $edit['when_taxonomy'],
      '#description' => t('Send a ping only if the node belongs to one of the following categories'),
    );
    $form['voc'] = array(
      '#type' => 'select',
      '#title' => t('Taxonomy terms when to ping'),
      '#default_value' => $edit['voc'],
      '#options' => taxonomy_form_all(),
      '#multiple' => TRUE,
      '#description' => t('Ping this service if any of the taxonomy terms selected above matches the respective node'),
    );
    $form['submitmainrss'] = array(
      '#type' => 'checkbox',
      '#title' => t('Send main RSS feed in ping'),
      '#default_value' => $edit['submitmainrss'],
      '#description' => t('If checked, the main RSS feed is sent; otherwise, an RSS feed containing only articles from the selected taxonomies is used.'),
    );
  }
  $form['when_nodetype'] = array(
    '#type' => 'checkbox',
    '#title' => t('Ping only for selected node types'),
    '#default_value' => $edit['when_nodetype'],
    '#description' => t('Send a ping only if the node is one of the following node types'),
  );
  $form['nodetype'] = array(
    '#type' => 'select',
    '#title' => t('Node types when to ping'),
    '#default_value' => $edit['nodetype'],
    '#options' => node_get_types('names'),
    '#multiple' => TRUE,
    '#description' => t('Ping this service if any of the node types selected above matches the respective node'),
  );
  $form['when_frontpage'] = array(
    '#type' => 'checkbox',
    '#title' => t('Ping only for nodes promoted to front page'),
    '#default_value' => $edit['when_frontpage'],
    '#description' => t('Send a ping only if the node is promoted to the front page'),
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );
  return $form;
}


function multiping_edit_service_submit($form_id, &$form_state) {
  $edit = $form_state['values']; // TODO: Is this ok? http://drupal.org/node/144132#process-params
  if ($edit['form_id'] === 'multiping_edit_service') {
    $service = (object) array(
      'voc' => serialize($edit['voc']),
      'nodetypes' => serialize($edit['nodetype']),
    );

    if ($edit['id'] && is_numeric($edit['id'])) {
      $service->id = $edit['id'];
    }
    if (!empty($edit['name'])) {
      $service->name = $edit['name'];
    }
    if (!empty($edit['url'])) {
      $service->url = $edit['url'];
    }
    if (!empty($edit['method'])) {
      $service->method = $edit['method'];
    }

    $service->submitmainrss = $edit['submitmainrss'] ? $edit['submitmainrss'] : 0; // Not present if false!
    if ($service->submitmainrss > 0) {
      $service->submitmainrss = 1;
    }

    $service->whentoping = $edit['when_active'] * MULTIPING_WHEN_ACTIVE +
      $edit['when_taxonomy'] * MULTIPING_WHEN_TAXONOMY +
      $edit['when_nodetype'] * MULTIPING_WHEN_NODETYPE +
      $edit['when_frontpage'] * MULTIPING_WHEN_FRONTPAGE;

    if (!isset($service->id)) {
      drupal_write_record('multiping', $service);
    }
    else {
      drupal_write_record('multiping', $service, 'id');
    }
  }
  drupal_set_message(t('Changes saved.'));
  #drupal_goto("admin/settings/multiping");
  $form_state['redirect'] = 'admin/settings/multiping';
}


function multiping_settings() {
  $form = array();
  $settings = _multiping_get_settings();
  $form['global']['time_between_pings'] = array(
     '#type' => 'textfield',
     '#title' => t('Time between pings'),
     '#default_value' => $settings['global']['time_between_pings'],
     '#size' => 8,
     '#maxlength' => 4,
     '#description' => t('Minimum number of minutes between two pings to same site'),
     '#attributes' => NULL,
     '#required' => TRUE,
  );
  $form['pingatonce'] = array(
    '#type' => 'checkbox',
    '#title' => t('Ping after post'),
    '#default_value' => $settings['global']['pingatonce'],
    '#description' => t('Ping directly after post/update (instead of pinging during the cron job runs)'),
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );
  return $form;
}


function multiping_settings_submit($form_id, &$form_state) {
  $edit = $form_state['values']; // TODO: Is this ok? http://drupal.org/node/144132#process-params
  if ($edit['form_id'] === 'multiping_settings') {
    $settings = _multiping_get_settings();
    $settings['global']['time_between_pings'] = $edit['time_between_pings'];
    $settings['global']['pingatonce'] = $edit['pingatonce'];
    variable_set('multiping', $settings);
  }
  drupal_set_message(t('Changes saved.'));
  #drupal_goto("admin/settings/multiping");
  $form_state['redirect'] = 'admin/settings/multiping';
}


/**
 * Menu callback: Admin page
 */
function multiping_admin() {
  $output = "";
  // General settings
  $output .= drupal_get_form('multiping_settings', $form);
  // Table with services
  $header = array(
    t('Name'),
    t('Last update'),
    array('data' => t('Operations'), 'colspan' => '3'),
  );
  $result = db_query('SELECT * FROM {multiping} ORDER BY id');
  while ($row = db_fetch_object($result)) {
    if ($row->lastping == 0) {
      $lastping = t('never');
    }
    else {
      $lastping = format_date($row->lastping, 'small');
    }
    $rows[] = array(
      $row->name,
      $lastping,
      l(t('edit'), 'admin/settings/multiping/'. $row->id .'/edit'),
      l(t('ping'), 'admin/settings/multiping/'. $row->id .'/ping'),
      l(t('delete'), 'admin/settings/multiping/'. $row->id .'/delete'),
    );
  }
  $output .= theme('table', $header, $rows);
  // Links
  $output .= '<p>'. l(t('Add service'), 'admin/settings/multiping/new') .'</p>';
  return $output;
}


function multiping_pingall() {
  $output = '<p>'. t("Running all pings...") .'</p>';
  $header = array(
    t('Name'),
    t('Status'),
  );
  $result = db_query('SELECT * FROM {multiping} ORDER BY id');
  while ($row = db_fetch_object($result)) {
    $rows[] = array($row->name, _multiping_doping($row) ? t('Ok') : t('Failed'));
  }
  $output .= theme('table', $header, $rows);
  $output .= '<p>'. l(t('Return'), 'admin/settings/multiping') .'</p>';
  return $output;
}


function multiping_ping($id) {
  if (!is_numeric($id)) {
    drupal_not_found();
  }
  else {
    $result = db_fetch_object(db_query('SELECT * FROM {multiping} WHERE id = %d', $id));
    if (!$result) {
      drupal_not_found();
    }
    else {
      $success = _multiping_doping($result);
      if ($success) {
        $message = t('%service pinged successfully.', array('%service' => $result->name));
        $message_type = 'status';
      }
      else {
        $message = t('Ping of %service failed.', array('%service' => $result->name));
        $message_type = 'warning';
      }
      drupal_set_message($message, $message_type);
      drupal_goto('admin/settings/multiping');
    }
  }
}


function multiping_delete($id) {
  watchdog('Multiping', 'delete @id', array('@id' => $id));
  if (!is_numeric($id)) {
    drupal_not_found();
    return;
  }
  db_query('DELETE FROM {multiping} WHERE id = %d', intval($id));
  drupal_set_message(t('Service deleted.'));
  drupal_goto('admin/settings/multiping');
}
